!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AUTO_CLB	focaltech_core.h	/^        u8 AUTO_CLB;$/;"	m	struct:fts_Upgrade_Info
AUTO_CLB_NEED	focaltech_flash.c	103;"	d	file:
AUTO_CLB_NONEED	focaltech_flash.c	104;"	d	file:
BL_VERSION_GZF	focaltech_flash.c	93;"	d	file:
BL_VERSION_LZ4	focaltech_flash.c	91;"	d	file:
BL_VERSION_Z7	focaltech_flash.c	92;"	d	file:
CHIP_ID	focaltech_core.h	/^        u8 CHIP_ID;$/;"	m	struct:fts_Upgrade_Info
CTPM_FW	focaltech_flash.c	/^static unsigned char CTPM_FW[] = {$/;"	v	file:
FT5306I_ID	focaltech_core.h	83;"	d
FT5316_ID	focaltech_core.h	82;"	d
FT5X06_ID	focaltech_core.h	76;"	d
FT5X16_ID	focaltech_core.h	77;"	d
FT5X36_ID	focaltech_core.h	78;"	d
FT6X06_ID	focaltech_core.h	79;"	d
FT6X36_ID	focaltech_core.h	80;"	d
FTS_4BIT_SHIFT	focaltech_core.c	108;"	d	file:
FTS_55_AA_DLY_NS	focaltech_flash.c	62;"	d	file:
FTS_8BIT_SHIFT	focaltech_core.c	107;"	d	file:
FTS_APK_DEBUG	focaltech_core.h	266;"	d
FTS_APP_INFO_ADDR	focaltech_flash.c	89;"	d	file:
FTS_AUTO_UPGRADE	focaltech_core.h	269;"	d
FTS_BLOADER_NEW_SIZE	focaltech_flash.c	70;"	d	file:
FTS_BLOADER_SIZE_OFF	focaltech_flash.c	69;"	d	file:
FTS_CAL_FIN	focaltech_flash.c	64;"	d	file:
FTS_CAL_MASK	focaltech_flash.c	68;"	d	file:
FTS_CAL_RETRY	focaltech_flash.c	66;"	d	file:
FTS_CAL_START	focaltech_flash.c	63;"	d	file:
FTS_CAL_STORE	focaltech_flash.c	65;"	d	file:
FTS_COORDS_ARR_SIZE	focaltech_core.c	104;"	d	file:
FTS_CTL_IIC	focaltech_core.h	268;"	d
FTS_DATA_LEN_OFF_NEW_FW	focaltech_flash.c	72;"	d	file:
FTS_DATA_LEN_OFF_OLD_FW	focaltech_flash.c	71;"	d	file:
FTS_DBG	focaltech_core.h	127;"	d
FTS_DBG	focaltech_core.h	129;"	d
FTS_DBG_EN	focaltech_core.h	125;"	d
FTS_DEBUG_DIR_NAME	focaltech_core.h	91;"	d
FTS_DEV_MODE_REG_CAL	focaltech_core.c	84;"	d	file:
FTS_DRIVER_INFO	focaltech_core.h	75;"	d
FTS_EARSE_DLY_MS	focaltech_flash.c	61;"	d	file:
FTS_ERASE_APP_REG	focaltech_flash.c	82;"	d	file:
FTS_ERASE_PARAMS_CMD	focaltech_flash.c	83;"	d	file:
FTS_FACTORYMODE_VALUE	focaltech_core.h	101;"	d
FTS_FACTORYMODE_VALUE	focaltech_flash.c	87;"	d	file:
FTS_FINISHING_PKT_LEN_NEW_FW	focaltech_flash.c	74;"	d	file:
FTS_FINISHING_PKT_LEN_OLD_FW	focaltech_flash.c	73;"	d	file:
FTS_FW_FILE_MAJ_VER	focaltech_flash.c	48;"	d	file:
FTS_FW_FILE_MAJ_VER_FT6X36	focaltech_flash.c	52;"	d	file:
FTS_FW_FILE_MIN_VER	focaltech_flash.c	49;"	d	file:
FTS_FW_FILE_SUB_MIN_VER	focaltech_flash.c	50;"	d	file:
FTS_FW_FILE_VENDOR_ID	focaltech_flash.c	51;"	d	file:
FTS_FW_FILE_VENDOR_ID_FT6X36	focaltech_flash.c	53;"	d	file:
FTS_FW_LAST_PKT	focaltech_flash.c	60;"	d	file:
FTS_FW_MAX_SIZE	focaltech_flash.c	46;"	d	file:
FTS_FW_MIN_SIZE	focaltech_flash.c	45;"	d	file:
FTS_FW_NAME_MAX_LEN	focaltech_core.h	94;"	d
FTS_FW_PKT_DLY_MS	focaltech_flash.c	59;"	d	file:
FTS_FW_PKT_META_LEN	focaltech_flash.c	58;"	d	file:
FTS_FW_WRITE_CMD	focaltech_flash.c	84;"	d	file:
FTS_GESTRUE_EN	focaltech_core.h	264;"	d
FTS_I2C_RDWR_MAX_QUEUE	focaltech_ctl.c	44;"	d	file:
FTS_I2C_RW	focaltech_ctl.c	46;"	d	file:
FTS_I2C_SLAVEADDR	focaltech_ctl.c	45;"	d	file:
FTS_I2C_VTG_MAX_UV	focaltech_core.c	102;"	d	file:
FTS_I2C_VTG_MIN_UV	focaltech_core.c	101;"	d	file:
FTS_INFO_MAX_LEN	focaltech_core.h	93;"	d
FTS_MAGIC_BLOADER_GZF	focaltech_flash.c	78;"	d	file:
FTS_MAGIC_BLOADER_GZF_30	focaltech_flash.c	77;"	d	file:
FTS_MAGIC_BLOADER_LZ4	focaltech_flash.c	76;"	d	file:
FTS_MAGIC_BLOADER_Z7	focaltech_flash.c	75;"	d	file:
FTS_MAX_ID	focaltech_core.c	65;"	d	file:
FTS_MAX_POINTS	focaltech_core.h	87;"	d
FTS_MAX_POINTS_10	focaltech_flash.c	102;"	d	file:
FTS_MAX_POINTS_2	focaltech_flash.c	100;"	d	file:
FTS_MAX_POINTS_5	focaltech_flash.c	101;"	d	file:
FTS_MAX_RD_BUF	focaltech_flash.c	57;"	d	file:
FTS_MAX_TRIES	focaltech_flash.c	54;"	d	file:
FTS_MAX_WR_BUF	focaltech_flash.c	56;"	d	file:
FTS_META_REGS	focaltech_core.c	60;"	d	file:
FTS_ONE_TCH_LEN	focaltech_core.c	61;"	d	file:
FTS_PACKET_LENGTH	focaltech_flash.c	96;"	d	file:
FTS_PMODE_ACTIVE	focaltech_core.c	92;"	d	file:
FTS_PMODE_HIBERNATE	focaltech_core.c	95;"	d	file:
FTS_PMODE_MONITOR	focaltech_core.c	93;"	d	file:
FTS_PMODE_STANDBY	focaltech_core.c	94;"	d	file:
FTS_PRESS	focaltech_core.c	64;"	d	file:
FTS_PSENSOR_ENABLE_MASK	focaltech_core.c	115;"	d	file:
FTS_PSENSOR_FAR_TO_NEAR	focaltech_core.c	118;"	d	file:
FTS_PSENSOR_NEAR_TO_FAR	focaltech_core.c	119;"	d	file:
FTS_PSENSOR_ORIGINAL_STATE_FAR	focaltech_core.c	120;"	d	file:
FTS_PSENSOR_STATUS_FAR	focaltech_core.c	117;"	d	file:
FTS_PSENSOR_STATUS_NEAR	focaltech_core.c	116;"	d	file:
FTS_PSENSOR_WAKEUP_TIMEOUT	focaltech_core.c	121;"	d	file:
FTS_READ_ID_REG	focaltech_flash.c	81;"	d	file:
FTS_REG_CAL	focaltech_flash.c	67;"	d	file:
FTS_REG_DEV_MODE	focaltech_core.c	83;"	d	file:
FTS_REG_ECC	focaltech_flash.c	79;"	d	file:
FTS_REG_FW_MAJ_VER	focaltech_flash.c	42;"	d	file:
FTS_REG_FW_MIN_VER	focaltech_flash.c	43;"	d	file:
FTS_REG_FW_SUB_MIN_VER	focaltech_flash.c	44;"	d	file:
FTS_REG_FW_VENDOR_ID	focaltech_core.h	98;"	d
FTS_REG_FW_VENDOR_ID	focaltech_flash.c	94;"	d	file:
FTS_REG_FW_VER	focaltech_core.h	97;"	d
FTS_REG_ID	focaltech_core.h	96;"	d
FTS_REG_PMODE	focaltech_core.c	86;"	d	file:
FTS_REG_POINT_RATE	focaltech_core.c	88;"	d	file:
FTS_REG_POINT_RATE	focaltech_core.h	99;"	d
FTS_REG_PSENSOR_ENABLE	focaltech_core.c	111;"	d	file:
FTS_REG_PSENSOR_STATUS	focaltech_core.c	112;"	d	file:
FTS_REG_RESET_FW	focaltech_flash.c	85;"	d	file:
FTS_REG_THGROUP	focaltech_core.c	89;"	d	file:
FTS_RETRY_DLY	focaltech_flash.c	55;"	d	file:
FTS_RST_CMD_REG1	focaltech_flash.c	86;"	d	file:
FTS_RST_CMD_REG2	focaltech_flash.c	80;"	d	file:
FTS_RW_IIC_DRV	focaltech_ctl.c	42;"	d	file:
FTS_RW_IIC_DRV_MAJOR	focaltech_ctl.c	43;"	d	file:
FTS_SETTING_BUF_LEN	focaltech_flash.c	97;"	d	file:
FTS_STATUS_NUM_TP_MASK	focaltech_core.c	97;"	d	file:
FTS_STORE_TS_INFO	focaltech_core.h	108;"	d
FTS_SUSPEND_LEVEL	focaltech_core.c	50;"	d	file:
FTS_SYSFS_DEBUG	focaltech_core.h	267;"	d
FTS_TCH_LEN	focaltech_core.c	62;"	d	file:
FTS_TOUCH_AREA_POS	focaltech_core.c	71;"	d	file:
FTS_TOUCH_CONTACT	focaltech_core.c	78;"	d	file:
FTS_TOUCH_DOWN	focaltech_core.c	76;"	d	file:
FTS_TOUCH_EVENT_POS	focaltech_core.c	73;"	d	file:
FTS_TOUCH_ID_POS	focaltech_core.c	74;"	d	file:
FTS_TOUCH_POINT_NUM	focaltech_core.c	72;"	d	file:
FTS_TOUCH_PRE_POS	focaltech_core.c	70;"	d	file:
FTS_TOUCH_UP	focaltech_core.c	77;"	d	file:
FTS_TOUCH_X_H_POS	focaltech_core.c	66;"	d	file:
FTS_TOUCH_X_L_POS	focaltech_core.c	67;"	d	file:
FTS_TOUCH_Y_H_POS	focaltech_core.c	68;"	d	file:
FTS_TOUCH_Y_L_POS	focaltech_core.c	69;"	d	file:
FTS_UPGRADE_55	focaltech_flash.c	106;"	d	file:
FTS_UPGRADE_AA	focaltech_flash.c	105;"	d	file:
FTS_UPGRADE_LOOP	focaltech_flash.c	99;"	d	file:
FTS_VTG_MAX_UV	focaltech_core.c	100;"	d	file:
FTS_VTG_MIN_UV	focaltech_core.c	99;"	d	file:
FTS_WORKMODE_VALUE	focaltech_core.h	102;"	d
FTS_WORKMODE_VALUE	focaltech_flash.c	88;"	d	file:
FTS_WORKQUEUE_NAME	focaltech_core.h	89;"	d
FTXXXX_INI_FILEPATH_CONFIG	focaltech_flash.c	108;"	d	file:
GTP_ESD_PROTECT	focaltech_core.h	265;"	d
HIDTOI2C_DISABLE	focaltech_flash.c	107;"	d	file:
LEN_FLASH_ECC_MAX	focaltech_core.h	85;"	d
MAX_BUTTONS	focaltech_core.c	105;"	d	file:
MSM_NEW_VER	focaltech_core.h	105;"	d
PINCTRL_STATE_ACTIVE	focaltech_core.c	123;"	d	file:
PINCTRL_STATE_RELEASE	focaltech_core.c	125;"	d	file:
PINCTRL_STATE_SUSPEND	focaltech_core.c	124;"	d	file:
POINT_READ_BUF	focaltech_core.c	80;"	d	file:
PROC_AUTOCLB	focaltech_ex_fun.c	52;"	d	file:
PROC_NAME	focaltech_ex_fun.c	57;"	d	file:
PROC_READ_DATA	focaltech_ex_fun.c	55;"	d	file:
PROC_READ_REGISTER	focaltech_ex_fun.c	50;"	d	file:
PROC_SET_TEST_FLAG	focaltech_ex_fun.c	56;"	d	file:
PROC_UPGRADE	focaltech_ex_fun.c	49;"	d	file:
PROC_UPGRADE_INFO	focaltech_ex_fun.c	53;"	d	file:
PROC_WRITE_DATA	focaltech_ex_fun.c	54;"	d	file:
PROC_WRITE_REGISTER	focaltech_ex_fun.c	51;"	d	file:
READ_BUF_SIZE	focaltech_ex_fun.c	60;"	d	file:
TPD_MAX_POINTS	focaltech_core.h	/^        u8 TPD_MAX_POINTS;$/;"	m	struct:fts_Upgrade_Info
TP_chip_check	focaltech_core.c	/^int TP_chip_check;$/;"	v
WRITE_BUF_SIZE	focaltech_ex_fun.c	59;"	d	file:
__LINUX_FTS_H__	focaltech_core.h	19;"	d
addr	focaltech_core.h	/^	u16 addr;$/;"	m	struct:fts_ts_data
android_touch_vendor_show	focaltech_core.c	/^static ssize_t android_touch_vendor_show(struct device *dev, $/;"	f	file:
apk_debug_flag	focaltech_ex_fun.c	/^int apk_debug_flag = 0;$/;"	v
area	focaltech_core.h	/^	u8 area[FTS_MAX_POINTS];$/;"	m	struct:ts_event
au16_x	focaltech_core.h	/^	u16 au16_x[FTS_MAX_POINTS];	\/*x coordinate *\/$/;"	m	struct:ts_event
au16_y	focaltech_core.h	/^	u16 au16_y[FTS_MAX_POINTS];	\/*y coordinate *\/$/;"	m	struct:ts_event
au8_finger_id	focaltech_core.h	/^	u8 au8_finger_id[FTS_MAX_POINTS];	\/*touch ID *\/$/;"	m	struct:ts_event
au8_touch_event	focaltech_core.h	/^	u8 au8_touch_event[FTS_MAX_POINTS];	\/*touch event:$/;"	m	struct:ts_event
aucFW_PRAM_BOOT	focaltech_flash.c	/^static unsigned char aucFW_PRAM_BOOT[] = {$/;"	v	file:
buf	focaltech_ctl.c	/^	u8 *buf;  	$/;"	m	struct:fts_rw_i2c	file:
buf_count_add	focaltech_core.c	/^static unsigned int buf_count_add=0;$/;"	v	file:
buf_count_neg	focaltech_core.c	/^static unsigned int buf_count_neg=0;$/;"	v	file:
buf_touch_data	focaltech_core.c	/^u8 buf_touch_data[30*POINT_READ_BUF] = { 0 };$/;"	v
cdev	focaltech_ctl.c	/^	struct cdev cdev;$/;"	m	struct:fts_rw_i2c_dev	typeref:struct:fts_rw_i2c_dev::cdev	file:
client	focaltech_core.h	/^	struct i2c_client *client;$/;"	m	struct:fts_ts_data	typeref:struct:fts_ts_data::i2c_client
client	focaltech_ctl.c	/^	struct i2c_client *client;$/;"	m	struct:fts_rw_i2c_dev	typeref:struct:fts_rw_i2c_dev::i2c_client	file:
data	focaltech_core.h	/^	struct fts_ts_data *data;$/;"	m	struct:fts_psensor_platform_data	typeref:struct:fts_psensor_platform_data::fts_ts_data
debug_dump_info_fops	focaltech_core.c	/^static const struct file_operations debug_dump_info_fops = {$/;"	v	typeref:struct:file_operations	file:
debugfs_dump_info_open	focaltech_core.c	/^static int debugfs_dump_info_open(struct inode *inode, struct file *file)$/;"	f	file:
delay_55	focaltech_core.h	/^	 u16 delay_55;						\/*delay of write FT_UPGRADE_55 *\/$/;"	m	struct:fts_Upgrade_Info
delay_aa	focaltech_core.h	/^	 u16 delay_aa;						\/*delay of write FT_UPGRADE_AA *\/$/;"	m	struct:fts_Upgrade_Info
delay_erase_flash	focaltech_core.h	/^	 u16 delay_erase_flash; 				\/*delay of earse flash*\/$/;"	m	struct:fts_Upgrade_Info
delay_readid	focaltech_core.h	/^	 u16 delay_readid;					\/*delay of read id *\/$/;"	m	struct:fts_Upgrade_Info
dir	focaltech_core.h	/^	struct dentry *dir;$/;"	m	struct:fts_ts_data	typeref:struct:fts_ts_data::dentry
early_suspend	focaltech_core.h	/^	struct early_suspend early_suspend;$/;"	m	struct:fts_ts_data	typeref:struct:fts_ts_data::early_suspend
event	focaltech_core.h	/^	struct ts_event event;$/;"	m	struct:fts_ts_data	typeref:struct:fts_ts_data::ts_event
family_id	focaltech_core.h	/^	u32 family_id;$/;"	m	struct:fts_ts_platform_data
family_id	focaltech_core.h	/^	u8 family_id;$/;"	m	struct:fts_ts_data
fb_notif	focaltech_core.h	/^	struct notifier_block fb_notif;$/;"	m	struct:fts_ts_data	typeref:struct:fts_ts_data::notifier_block
fb_notifier_callback	focaltech_core.c	/^static int fb_notifier_callback(struct notifier_block *self,$/;"	f	file:
flag	focaltech_ctl.c	/^	u8 flag;	\/*0-write 1-read*\/$/;"	m	struct:fts_rw_i2c	file:
fts_3x07_ctpm_fw_upgrade	focaltech_flash.c	/^int fts_3x07_ctpm_fw_upgrade(struct i2c_client *client, u8 *pbt_buf, u32 dw_lenth)$/;"	f
fts_5822_ctpm_fw_upgrade	focaltech_flash.c	/^int fts_5822_ctpm_fw_upgrade(struct i2c_client *client, u8 *pbt_buf, u32 dw_lenth)$/;"	f
fts_5x06_ctpm_fw_upgrade	focaltech_flash.c	/^int fts_5x06_ctpm_fw_upgrade(struct i2c_client *client, u8 *pbt_buf, u32 dw_lenth)$/;"	f
fts_5x26_ctpm_fw_upgrade	focaltech_flash.c	/^int fts_5x26_ctpm_fw_upgrade(struct i2c_client *client, u8 *pbt_buf, u32 dw_lenth)$/;"	f
fts_5x36_ctpm_fw_upgrade	focaltech_flash.c	/^int fts_5x36_ctpm_fw_upgrade(struct i2c_client *client, u8 *pbt_buf, u32 dw_lenth)$/;"	f
fts_5x46_ctpm_fw_upgrade	focaltech_flash.c	/^int  fts_5x46_ctpm_fw_upgrade(struct i2c_client * client, u8* pbt_buf, u32 dw_lenth)$/;"	f
fts_6336GU_ctpm_fw_upgrade	focaltech_flash.c	/^int fts_6336GU_ctpm_fw_upgrade(struct i2c_client *client, u8 *pbt_buf, u32 dw_lenth)$/;"	f
fts_6x06_ctpm_fw_upgrade	focaltech_flash.c	/^int fts_6x06_ctpm_fw_upgrade(struct i2c_client *client, u8 *pbt_buf, u32 dw_lenth)$/;"	f
fts_6x36_ctpm_fw_upgrade	focaltech_flash.c	/^int fts_6x36_ctpm_fw_upgrade(struct i2c_client *client, u8 *pbt_buf, u32 dw_lenth)$/;"	f
fts_8606_ctpm_fw_upgrade	focaltech_flash.c	/^int  fts_8606_ctpm_fw_upgrade(struct i2c_client * client, u8* pbt_buf, u32 dw_lenth)$/;"	f
fts_8606_writepram	focaltech_flash.c	/^int  fts_8606_writepram(struct i2c_client * client, u8* pbt_buf, u32 dw_lenth)$/;"	f
fts_8716_ctpm_fw_upgrade	focaltech_flash.c	/^int  fts_8716_ctpm_fw_upgrade(struct i2c_client * client, u8* pbt_buf, u32 dw_lenth)$/;"	f
fts_8716_writepram	focaltech_flash.c	/^int  fts_8716_writepram(struct i2c_client * client, u8* pbt_buf, u32 dw_lenth)$/;"	f
fts_GetFirmwareSize	focaltech_flash.c	/^static int fts_GetFirmwareSize(char *firmware_name)$/;"	f	file:
fts_ReadFirmware	focaltech_flash.c	/^static int fts_ReadFirmware(char *firmware_name,unsigned char *firmware_buf)$/;"	f	file:
fts_Upgrade_Info	focaltech_core.h	/^struct fts_Upgrade_Info $/;"	s
fts_attribute_group	focaltech_ex_fun.c	/^static struct attribute_group fts_attribute_group = {$/;"	v	typeref:struct:attribute_group	file:
fts_attributes	focaltech_ex_fun.c	/^static struct attribute *fts_attributes[] = {$/;"	v	typeref:struct:attribute	file:
fts_class	focaltech_ctl.c	/^static struct class *fts_class;$/;"	v	typeref:struct:class	file:
fts_create_apk_debug_channel	focaltech_ex_fun.c	/^int fts_create_apk_debug_channel(struct i2c_client * client)$/;"	f
fts_create_sysfs	focaltech_ex_fun.c	/^int fts_create_sysfs(struct i2c_client * client)$/;"	f
fts_ctpm_auto_clb	focaltech_flash.c	/^int fts_ctpm_auto_clb(struct i2c_client *client)$/;"	f
fts_ctpm_auto_upgrade	focaltech_flash.c	/^int fts_ctpm_auto_upgrade(struct i2c_client *client)$/;"	f
fts_ctpm_fw_upgrade_ReadProjectCode	focaltech_flash.c	/^int fts_ctpm_fw_upgrade_ReadProjectCode(struct i2c_client *client, char *pProjectCode)$/;"	f
fts_ctpm_fw_upgrade_ReadVendorID	focaltech_flash.c	/^int fts_ctpm_fw_upgrade_ReadVendorID(struct i2c_client *client, u8 *ucPVendorID)$/;"	f
fts_ctpm_fw_upgrade_with_app_file	focaltech_flash.c	/^int fts_ctpm_fw_upgrade_with_app_file(struct i2c_client *client, char *firmware_name)$/;"	f
fts_ctpm_fw_upgrade_with_i_file	focaltech_flash.c	/^int fts_ctpm_fw_upgrade_with_i_file(struct i2c_client *client)$/;"	f
fts_ctpm_get_i_file_ver	focaltech_flash.c	/^int fts_ctpm_get_i_file_ver(void)$/;"	f
fts_ctpm_update_project_setting	focaltech_flash.c	/^int fts_ctpm_update_project_setting(struct i2c_client *client)$/;"	f
fts_debug_addr_get	focaltech_core.c	/^static int fts_debug_addr_get(void *_data, u64 *val)$/;"	f	file:
fts_debug_addr_is_valid	focaltech_core.c	/^static bool fts_debug_addr_is_valid(int addr)$/;"	f	file:
fts_debug_addr_set	focaltech_core.c	/^static int fts_debug_addr_set(void *_data, u64 val)$/;"	f	file:
fts_debug_data_get	focaltech_core.c	/^static int fts_debug_data_get(void *_data, u64 *val)$/;"	f	file:
fts_debug_data_set	focaltech_core.c	/^static int fts_debug_data_set(void *_data, u64 val)$/;"	f	file:
fts_debug_dump_info	focaltech_core.c	/^int fts_debug_dump_info(struct seq_file *m, void *v)$/;"	f
fts_debug_read	focaltech_ex_fun.c	/^static int fts_debug_read( char *page, char **start,$/;"	f	file:
fts_debug_read	focaltech_ex_fun.c	/^static ssize_t fts_debug_read(struct file *filp, char __user *buff, size_t count, loff_t *ppos)$/;"	f	file:
fts_debug_suspend_get	focaltech_core.c	/^static int fts_debug_suspend_get(void *_data, u64 *val)$/;"	f	file:
fts_debug_suspend_set	focaltech_core.c	/^static int fts_debug_suspend_set(void *_data, u64 val)$/;"	f	file:
fts_debug_write	focaltech_ex_fun.c	/^static int fts_debug_write(struct file *filp, $/;"	f	file:
fts_debug_write	focaltech_ex_fun.c	/^static ssize_t fts_debug_write(struct file *filp, const char __user *buff, size_t count, loff_t *ppos)$/;"	f	file:
fts_fwupdate_show	focaltech_ex_fun.c	/^static ssize_t fts_fwupdate_show(struct device *dev, struct device_attribute *attr, char *buf)$/;"	f	file:
fts_fwupdate_store	focaltech_ex_fun.c	/^static ssize_t fts_fwupdate_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)$/;"	f	file:
fts_fwupgradeapp_show	focaltech_ex_fun.c	/^static ssize_t fts_fwupgradeapp_show(struct device *dev, struct device_attribute *attr, char *buf)$/;"	f	file:
fts_fwupgradeapp_store	focaltech_ex_fun.c	/^static ssize_t fts_fwupgradeapp_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)$/;"	f	file:
fts_get_dt_coords	focaltech_core.c	/^static int fts_get_dt_coords(struct device *dev, char *name,$/;"	f	file:
fts_get_key_index	focaltech_core.c	/^static int fts_get_key_index(const struct fts_ts_platform_data *pdata, unsigned int x, unsigned int y)$/;"	f	file:
fts_get_upgrade_array	focaltech_flash.c	/^void fts_get_upgrade_array(void)$/;"	f
fts_getprojectcode_show	focaltech_ex_fun.c	/^static ssize_t fts_getprojectcode_show(struct device *dev, struct device_attribute *attr, char *buf)$/;"	f	file:
fts_getprojectcode_store	focaltech_ex_fun.c	/^static ssize_t fts_getprojectcode_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)$/;"	f	file:
fts_gpio_configure	focaltech_core.c	/^static int fts_gpio_configure(struct fts_ts_data *data, bool on)$/;"	f	file:
fts_i2c_client	focaltech_core.c	/^struct i2c_client *fts_i2c_client;$/;"	v	typeref:struct:i2c_client
fts_i2c_read	focaltech_core.c	/^int fts_i2c_read(struct i2c_client *client, char *writebuf, int writelen, char *readbuf, int readlen)$/;"	f
fts_i2c_write	focaltech_core.c	/^int fts_i2c_write(struct i2c_client *client, char *writebuf, int writelen)$/;"	f
fts_input_dev	focaltech_core.c	/^struct input_dev *fts_input_dev;$/;"	v	typeref:struct:input_dev
fts_match_table	focaltech_core.c	/^static struct of_device_id fts_match_table[] = {$/;"	v	typeref:struct:of_device_id	file:
fts_match_table	focaltech_core.c	2363;"	d	file:
fts_parse_dt	focaltech_core.c	/^static int fts_parse_dt(struct device *dev, struct fts_ts_platform_data *pdata)$/;"	f	file:
fts_power_init	focaltech_core.c	/^static int fts_power_init(struct fts_ts_data *data, bool on)$/;"	f	file:
fts_power_on	focaltech_core.c	/^static int fts_power_on(struct fts_ts_data *data, bool on)$/;"	f	file:
fts_proc_entry	focaltech_ex_fun.c	/^static struct proc_dir_entry *fts_proc_entry;$/;"	v	typeref:struct:proc_dir_entry	file:
fts_proc_fops	focaltech_ex_fun.c	/^static const struct file_operations fts_proc_fops = {$/;"	v	typeref:struct:file_operations	file:
fts_psensor_enable	focaltech_core.c	/^static void fts_psensor_enable(struct fts_ts_data *data, int enable)$/;"	f	file:
fts_psensor_enable_set	focaltech_core.c	/^static int fts_psensor_enable_set(struct sensors_classdev *sensors_cdev,$/;"	f	file:
fts_psensor_platform_data	focaltech_core.h	/^struct fts_psensor_platform_data {$/;"	s
fts_psensor_support_enabled	focaltech_core.c	/^static inline bool fts_psensor_support_enabled(void)$/;"	f	file:
fts_read_Touchdata	focaltech_core.c	/^static int fts_read_Touchdata(struct fts_ts_data *data)$/;"	f	file:
fts_read_reg	focaltech_core.c	/^int fts_read_reg(struct i2c_client *client, u8 addr, u8 *val)$/;"	f
fts_read_tp_psensor_data	focaltech_core.c	/^static int fts_read_tp_psensor_data(struct fts_ts_data *data)$/;"	f	file:
fts_release_apk_debug_channel	focaltech_ex_fun.c	/^void fts_release_apk_debug_channel(void)$/;"	f
fts_remove_sysfs	focaltech_ex_fun.c	/^int fts_remove_sysfs(struct i2c_client * client)$/;"	f
fts_report_value	focaltech_core.c	/^static void fts_report_value(struct fts_ts_data *data)$/;"	f	file:
fts_rw_i2c	focaltech_ctl.c	/^typedef struct fts_rw_i2c$/;"	s	file:
fts_rw_i2c_dev	focaltech_ctl.c	/^struct fts_rw_i2c_dev $/;"	s	file:
fts_rw_i2c_dev_tt	focaltech_ctl.c	/^struct fts_rw_i2c_dev *fts_rw_i2c_dev_tt;$/;"	v	typeref:struct:fts_rw_i2c_dev
fts_rw_i2c_mutex	focaltech_ctl.c	/^	struct mutex fts_rw_i2c_mutex;$/;"	m	struct:fts_rw_i2c_dev	typeref:struct:fts_rw_i2c_dev::mutex	file:
fts_rw_i2c_queue	focaltech_ctl.c	/^typedef struct fts_rw_i2c_queue$/;"	s	file:
fts_rw_iic_drv_RDWR	focaltech_ctl.c	/^static int fts_rw_iic_drv_RDWR(struct i2c_client *client, unsigned long arg)$/;"	f	file:
fts_rw_iic_drv_exit	focaltech_ctl.c	/^void  fts_rw_iic_drv_exit(void)$/;"	f
fts_rw_iic_drv_fops	focaltech_ctl.c	/^static const struct file_operations fts_rw_iic_drv_fops = {$/;"	v	typeref:struct:file_operations	file:
fts_rw_iic_drv_init	focaltech_ctl.c	/^int fts_rw_iic_drv_init(struct i2c_client *client)$/;"	f
fts_rw_iic_drv_ioctl	focaltech_ctl.c	/^static long fts_rw_iic_drv_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)$/;"	f	file:
fts_rw_iic_drv_major	focaltech_ctl.c	/^static int fts_rw_iic_drv_major = FTS_RW_IIC_DRV_MAJOR;$/;"	v	file:
fts_rw_iic_drv_myinitdev	focaltech_ctl.c	/^static int fts_rw_iic_drv_myinitdev(struct i2c_client *client)$/;"	f	file:
fts_rw_iic_drv_myread	focaltech_ctl.c	/^static int fts_rw_iic_drv_myread(struct i2c_client *client, u8 *buf, int length)$/;"	f	file:
fts_rw_iic_drv_mywrite	focaltech_ctl.c	/^static int fts_rw_iic_drv_mywrite(struct i2c_client *client, u8 *buf, int length)$/;"	f	file:
fts_rw_iic_drv_open	focaltech_ctl.c	/^static int fts_rw_iic_drv_open(struct inode *inode, struct file *filp)$/;"	f	file:
fts_rw_iic_drv_release	focaltech_ctl.c	/^static int fts_rw_iic_drv_release(struct inode *inode, struct file *filp)$/;"	f	file:
fts_rw_iic_drv_setup_cdev	focaltech_ctl.c	/^static void fts_rw_iic_drv_setup_cdev(struct fts_rw_i2c_dev *dev, int index)$/;"	f	file:
fts_touch_irq_work	focaltech_core.c	/^static void fts_touch_irq_work(void)$/;"	f	file:
fts_tpdriver_version_show	focaltech_ex_fun.c	/^static ssize_t fts_tpdriver_version_show(struct device *dev, struct device_attribute *attr, char *buf)$/;"	f	file:
fts_tpdriver_version_store	focaltech_ex_fun.c	/^static ssize_t fts_tpdriver_version_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)$/;"	f	file:
fts_tpfwver_show	focaltech_ex_fun.c	/^static ssize_t fts_tpfwver_show(struct device *dev, struct device_attribute *attr, char *buf)$/;"	f	file:
fts_tpfwver_store	focaltech_ex_fun.c	/^static ssize_t fts_tpfwver_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)$/;"	f	file:
fts_tprwreg_show	focaltech_ex_fun.c	/^static ssize_t fts_tprwreg_show(struct device *dev, struct device_attribute *attr, char *buf)$/;"	f	file:
fts_tprwreg_store	focaltech_ex_fun.c	/^static ssize_t fts_tprwreg_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)$/;"	f	file:
fts_ts_data	focaltech_core.h	/^struct fts_ts_data {$/;"	s
fts_ts_driver	focaltech_core.c	/^static struct i2c_driver fts_ts_driver = {$/;"	v	typeref:struct:i2c_driver	file:
fts_ts_early_suspend	focaltech_core.c	/^static void fts_ts_early_suspend(struct early_suspend *handler)$/;"	f	file:
fts_ts_exit	focaltech_core.c	/^module_exit(fts_ts_exit);$/;"	v
fts_ts_exit	focaltech_core.c	/^static void __exit fts_ts_exit(void)$/;"	f	file:
fts_ts_id	focaltech_core.c	/^static const struct i2c_device_id fts_ts_id[] = {$/;"	v	typeref:struct:i2c_device_id	file:
fts_ts_init	focaltech_core.c	/^module_init(fts_ts_init);$/;"	v
fts_ts_init	focaltech_core.c	/^static int __init fts_ts_init(void)$/;"	f	file:
fts_ts_interrupt	focaltech_core.c	/^static irqreturn_t fts_ts_interrupt(int irq, void *dev_id)$/;"	f	file:
fts_ts_late_resume	focaltech_core.c	/^static void fts_ts_late_resume(struct early_suspend *handler)$/;"	f	file:
fts_ts_pinctrl_init	focaltech_core.c	/^static int fts_ts_pinctrl_init(struct fts_ts_data *fts_data)$/;"	f	file:
fts_ts_platform_data	focaltech_core.h	/^struct fts_ts_platform_data {$/;"	s
fts_ts_pm_ops	focaltech_core.c	/^static const struct dev_pm_ops fts_ts_pm_ops = {$/;"	v	typeref:struct:dev_pm_ops	file:
fts_ts_probe	focaltech_core.c	/^static int fts_ts_probe(struct i2c_client *client, const struct i2c_device_id *id)$/;"	f	file:
fts_ts_remove	focaltech_core.c	/^static int fts_ts_remove(struct i2c_client *client)$/;"	f	file:
fts_ts_resume	focaltech_core.c	/^int fts_ts_resume(struct device *dev)$/;"	f
fts_ts_resume	focaltech_core.c	/^static int fts_ts_resume(struct device *dev)$/;"	f	file:
fts_ts_start	focaltech_core.c	/^static int fts_ts_start(struct device *dev)$/;"	f	file:
fts_ts_stop	focaltech_core.c	/^static int fts_ts_stop(struct device *dev)$/;"	f	file:
fts_ts_suspend	focaltech_core.c	/^int fts_ts_suspend(struct device *dev)$/;"	f
fts_ts_suspend	focaltech_core.c	/^static int fts_ts_suspend(struct device *dev)$/;"	f	file:
fts_update_fw_vendor_id	focaltech_flash.c	/^void fts_update_fw_vendor_id(struct fts_ts_data *data)$/;"	f
fts_update_fw_ver	focaltech_flash.c	/^void fts_update_fw_ver(struct fts_ts_data *data)$/;"	f
fts_update_fw_work	focaltech_core.c	/^static void fts_update_fw_work(struct work_struct *work)$/;"	f	file:
fts_updateinfo	focaltech_flash.c	/^ struct fts_Upgrade_Info fts_updateinfo[] =$/;"	v	typeref:struct:fts_Upgrade_Info
fts_updateinfo_curr	focaltech_flash.c	/^struct fts_Upgrade_Info fts_updateinfo_curr;$/;"	v	typeref:struct:fts_Upgrade_Info
fts_wq_data	focaltech_core.c	/^struct fts_ts_data *fts_wq_data;$/;"	v	typeref:struct:fts_ts_data
fts_write_reg	focaltech_core.c	/^int fts_write_reg(struct i2c_client *client, u8 addr, const u8 val)$/;"	f
fw_name	focaltech_core.h	/^	char fw_name[FTS_FW_NAME_MAX_LEN];$/;"	m	struct:fts_ts_data
fw_name	focaltech_core.h	/^	const char *fw_name;$/;"	m	struct:fts_ts_platform_data
fw_vendor_id	focaltech_core.h	/^	u8 fw_vendor_id;$/;"	m	struct:fts_ts_data
fw_ver	focaltech_core.h	/^	u8 fw_ver[3];$/;"	m	struct:fts_ts_data
fw_vkey_support	focaltech_core.h	/^	bool fw_vkey_support;$/;"	m	struct:fts_ts_platform_data
g_android_touch	focaltech_core.c	/^static struct kset *g_android_touch;$/;"	v	typeref:struct:kset	file:
g_i2c_flag	focaltech_core.c	/^static int g_i2c_flag = 0;$/;"	v	file:
g_touch_attrs	focaltech_core.c	/^static struct device_attribute g_touch_attrs[] = {$/;"	v	typeref:struct:device_attribute	file:
group_id	focaltech_core.h	/^	u32 group_id;$/;"	m	struct:fts_ts_platform_data
hard_rst_dly	focaltech_core.h	/^	u32 hard_rst_dly;$/;"	m	struct:fts_ts_platform_data
hidi2c_to_stdi2c	focaltech_flash.c	/^int hidi2c_to_stdi2c(struct i2c_client * client)$/;"	f
i2c_pull_up	focaltech_core.h	/^	bool i2c_pull_up;$/;"	m	struct:fts_ts_platform_data
i2c_queue	focaltech_ctl.c	/^	struct fts_rw_i2c __user *i2c_queue;$/;"	m	struct:fts_rw_i2c_queue	typeref:struct:fts_rw_i2c_queue::__user	file:
ignore_id_check	focaltech_core.h	/^	bool ignore_id_check;$/;"	m	struct:fts_ts_platform_data
info	focaltech_core.h	/^	struct fts_Upgrade_Info info;$/;"	m	struct:fts_ts_platform_data	typeref:struct:fts_ts_platform_data::fts_Upgrade_Info
input_dev	focaltech_core.h	/^	struct input_dev *input_dev;$/;"	m	struct:fts_ts_data	typeref:struct:fts_ts_data::input_dev
input_psensor_dev	focaltech_core.h	/^	struct input_dev *input_psensor_dev;$/;"	m	struct:fts_psensor_platform_data	typeref:struct:fts_psensor_platform_data::input_dev
irq_gpio	focaltech_core.h	/^	u32 irq_gpio;$/;"	m	struct:fts_ts_platform_data
irq_gpio_flags	focaltech_core.h	/^	u32 irq_gpio_flags;$/;"	m	struct:fts_ts_platform_data
irqflags	focaltech_core.h	/^	u32 irqflags;$/;"	m	struct:fts_ts_platform_data
key_index	focaltech_core.h	/^	int key_index;$/;"	m	struct:fts_ts_data
keymap_num	focaltech_core.h	/^	unsigned int keymap_num;$/;"	m	struct:fts_ts_platform_data
keymap_range	focaltech_core.h	/^	struct keymap_range *keymap_range;$/;"	m	struct:fts_ts_platform_data	typeref:struct:fts_ts_platform_data::keymap_range
keymap_range	focaltech_core.h	/^struct keymap_range {$/;"	s
keymap_value	focaltech_core.h	/^	unsigned int *keymap_value;$/;"	m	struct:fts_ts_platform_data
length	focaltech_ctl.c	/^	__u16 length; \/\/the length of data $/;"	m	struct:fts_rw_i2c	file:
loading_fw	focaltech_core.h	/^	bool loading_fw;$/;"	m	struct:fts_ts_data
name	focaltech_core.h	/^	const char *name;$/;"	m	struct:fts_ts_platform_data
no_force_update	focaltech_core.h	/^	bool no_force_update;$/;"	m	struct:fts_ts_platform_data
num_max_touches	focaltech_core.h	/^	u32 num_max_touches;$/;"	m	struct:fts_ts_platform_data
panel_maxx	focaltech_core.h	/^	u32 panel_maxx;$/;"	m	struct:fts_ts_platform_data
panel_maxy	focaltech_core.h	/^	u32 panel_maxy;$/;"	m	struct:fts_ts_platform_data
panel_minx	focaltech_core.h	/^	u32 panel_minx;$/;"	m	struct:fts_ts_platform_data
panel_miny	focaltech_core.h	/^	u32 panel_miny;$/;"	m	struct:fts_ts_platform_data
pdata	focaltech_core.h	/^	const struct fts_ts_platform_data *pdata;$/;"	m	struct:fts_ts_data	typeref:struct:fts_ts_data::fts_ts_platform_data
pfts_rw_i2c	focaltech_ctl.c	/^}*pfts_rw_i2c;$/;"	t	typeref:struct:fts_rw_i2c	file:
pfts_rw_i2c_queue	focaltech_ctl.c	/^}*pfts_rw_i2c_queue;$/;"	t	typeref:struct:fts_rw_i2c_queue	file:
pinctrl_state_active	focaltech_core.h	/^	struct pinctrl_state *pinctrl_state_active;$/;"	m	struct:fts_ts_data	typeref:struct:fts_ts_data::pinctrl_state
pinctrl_state_release	focaltech_core.h	/^	struct pinctrl_state *pinctrl_state_release;$/;"	m	struct:fts_ts_data	typeref:struct:fts_ts_data::pinctrl_state
pinctrl_state_suspend	focaltech_core.h	/^	struct pinctrl_state *pinctrl_state_suspend;$/;"	m	struct:fts_ts_data	typeref:struct:fts_ts_data::pinctrl_state
point_num	focaltech_core.h	/^	u8 point_num;$/;"	m	struct:ts_event
power_init	focaltech_core.h	/^	int (*power_init) (bool);$/;"	m	struct:fts_ts_platform_data
power_on	focaltech_core.h	/^	int (*power_on) (bool);$/;"	m	struct:fts_ts_platform_data
pressure	focaltech_core.h	/^	u16 pressure[FTS_MAX_POINTS];$/;"	m	struct:ts_event
proc_operate_mode	focaltech_ex_fun.c	/^static unsigned char proc_operate_mode = PROC_UPGRADE;$/;"	v	file:
ps_cdev	focaltech_core.h	/^	struct sensors_classdev ps_cdev;$/;"	m	struct:fts_psensor_platform_data	typeref:struct:fts_psensor_platform_data::sensors_classdev
psensor_pdata	focaltech_core.h	/^	struct fts_psensor_platform_data *psensor_pdata;$/;"	m	struct:fts_ts_data	typeref:struct:fts_ts_data::fts_psensor_platform_data
psensor_support	focaltech_core.h	/^	bool psensor_support;$/;"	m	struct:fts_ts_platform_data
queuenum	focaltech_ctl.c	/^	int queuenum;	$/;"	m	struct:fts_rw_i2c_queue	file:
reset_gpio	focaltech_core.h	/^	u32 reset_gpio;$/;"	m	struct:fts_ts_platform_data
reset_gpio_flags	focaltech_core.h	/^	u32 reset_gpio_flags;$/;"	m	struct:fts_ts_platform_data
sensors_proximity_cdev	focaltech_core.c	/^static struct sensors_classdev __maybe_unused sensors_proximity_cdev = {$/;"	v	typeref:struct:__maybe_unused	file:
soft_rst_dly	focaltech_core.h	/^	u32 soft_rst_dly;$/;"	m	struct:fts_ts_platform_data
strict_strtoul	focaltech_ex_fun.c	42;"	d	file:
suspended	focaltech_core.h	/^	bool suspended;$/;"	m	struct:fts_ts_data
tch_data	focaltech_core.h	/^	u8 *tch_data;$/;"	m	struct:fts_ts_data
tch_data_len	focaltech_core.h	/^	u32 tch_data_len;$/;"	m	struct:fts_ts_data
touch_event_work	focaltech_core.h	/^	struct work_struct 	touch_event_work;$/;"	m	struct:fts_ts_data	typeref:struct:fts_ts_data::work_struct
touch_point	focaltech_core.h	/^	u8 touch_point;$/;"	m	struct:ts_event
touchs	focaltech_core.h	/^	int touchs;$/;"	m	struct:fts_ts_data
tp_psensor_data	focaltech_core.h	/^	char tp_psensor_data; \/* 0 near, 1 far *\/$/;"	m	struct:fts_psensor_platform_data
tp_psensor_opened	focaltech_core.h	/^	int tp_psensor_opened;$/;"	m	struct:fts_psensor_platform_data
ts_event	focaltech_core.h	/^struct ts_event {$/;"	s
ts_info	focaltech_core.h	/^	char *ts_info;$/;"	m	struct:fts_ts_data
ts_pinctrl	focaltech_core.h	/^	struct pinctrl *ts_pinctrl;$/;"	m	struct:fts_ts_data	typeref:struct:fts_ts_data::pinctrl
ts_workqueue	focaltech_core.h	/^	struct workqueue_struct *ts_workqueue;$/;"	m	struct:fts_ts_data	typeref:struct:fts_ts_data::workqueue_struct
update_fw_work	focaltech_core.h	/^	struct work_struct 	update_fw_work;$/;"	m	struct:fts_ts_data	typeref:struct:fts_ts_data::work_struct
upgrade_id_1	focaltech_core.h	/^	 u8 upgrade_id_1;					\/*upgrade id 1 *\/$/;"	m	struct:fts_Upgrade_Info
upgrade_id_2	focaltech_core.h	/^	 u8 upgrade_id_2;					\/*upgrade id 2 *\/$/;"	m	struct:fts_Upgrade_Info
vcc_i2c	focaltech_core.h	/^	struct regulator *vcc_i2c;$/;"	m	struct:fts_ts_data	typeref:struct:fts_ts_data::regulator
vdd	focaltech_core.h	/^	struct regulator *vdd;$/;"	m	struct:fts_ts_data	typeref:struct:fts_ts_data::regulator
x	focaltech_core.h	/^	unsigned int x;$/;"	m	struct:keymap_range
x_max	focaltech_core.h	/^	u32 x_max;$/;"	m	struct:fts_ts_platform_data
x_min	focaltech_core.h	/^	u32 x_min;$/;"	m	struct:fts_ts_platform_data
x_width	focaltech_core.h	/^	unsigned int x_width;$/;"	m	struct:keymap_range
y	focaltech_core.h	/^	unsigned int y;$/;"	m	struct:keymap_range
y_max	focaltech_core.h	/^	u32 y_max;$/;"	m	struct:fts_ts_platform_data
y_min	focaltech_core.h	/^	u32 y_min;$/;"	m	struct:fts_ts_platform_data
y_width	focaltech_core.h	/^	unsigned int y_width;$/;"	m	struct:keymap_range
